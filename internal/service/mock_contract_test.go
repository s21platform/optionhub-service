// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	optionhub_proto "github.com/s21platform/optionhub-proto/optionhub-proto"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// AddOS mocks base method.
func (m *MockDbRepo) AddOS(ctx context.Context, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOS", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOS indicates an expected call of AddOS.
func (mr *MockDbRepoMockRecorder) AddOS(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOS", reflect.TypeOf((*MockDbRepo)(nil).AddOS), ctx, name)
}

// GetOsBSearchName mocks base method.
func (m *MockDbRepo) GetOsBSearchName(ctx context.Context, name string) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsBSearchName", ctx, name)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsBSearchName indicates an expected call of GetOsBSearchName.
func (mr *MockDbRepoMockRecorder) GetOsBSearchName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsBSearchName", reflect.TypeOf((*MockDbRepo)(nil).GetOsBSearchName), ctx, name)
}

// GetOsById mocks base method.
func (m *MockDbRepo) GetOsById(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsById", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsById indicates an expected call of GetOsById.
func (mr *MockDbRepoMockRecorder) GetOsById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsById", reflect.TypeOf((*MockDbRepo)(nil).GetOsById), ctx, id)
}
