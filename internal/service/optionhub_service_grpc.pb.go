// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: optionhub_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OptionhubService_GetOsById_FullMethodName            = "/OptionhubService/GetOsById"
	OptionhubService_GetAllOs_FullMethodName             = "/OptionhubService/GetAllOs"
	OptionhubService_AddOs_FullMethodName                = "/OptionhubService/AddOs"
	OptionhubService_SetOsById_FullMethodName            = "/OptionhubService/SetOsById"
	OptionhubService_DeleteOsById_FullMethodName         = "/OptionhubService/DeleteOsById"
	OptionhubService_GetWorkPlaceById_FullMethodName     = "/OptionhubService/GetWorkPlaceById"
	OptionhubService_GetAllWorkPlace_FullMethodName      = "/OptionhubService/GetAllWorkPlace"
	OptionhubService_AddWorkPlace_FullMethodName         = "/OptionhubService/AddWorkPlace"
	OptionhubService_SetWorkPlaceById_FullMethodName     = "/OptionhubService/SetWorkPlaceById"
	OptionhubService_DeleteWorkPlaceById_FullMethodName  = "/OptionhubService/DeleteWorkPlaceById"
	OptionhubService_GetStudyPlaceById_FullMethodName    = "/OptionhubService/GetStudyPlaceById"
	OptionhubService_GetAllStudyPlace_FullMethodName     = "/OptionhubService/GetAllStudyPlace"
	OptionhubService_AddStudyPlace_FullMethodName        = "/OptionhubService/AddStudyPlace"
	OptionhubService_SetStudyPlaceById_FullMethodName    = "/OptionhubService/SetStudyPlaceById"
	OptionhubService_DeleteStudyPlaceById_FullMethodName = "/OptionhubService/DeleteStudyPlaceById"
	OptionhubService_GetHobbyById_FullMethodName         = "/OptionhubService/GetHobbyById"
	OptionhubService_GetHobbyPlace_FullMethodName        = "/OptionhubService/GetHobbyPlace"
	OptionhubService_AddHobby_FullMethodName             = "/OptionhubService/AddHobby"
	OptionhubService_SetHobbyById_FullMethodName         = "/OptionhubService/SetHobbyById"
	OptionhubService_DeleteHobbyById_FullMethodName      = "/OptionhubService/DeleteHobbyById"
	OptionhubService_GetSkillById_FullMethodName         = "/OptionhubService/GetSkillById"
	OptionhubService_GetSkillPlace_FullMethodName        = "/OptionhubService/GetSkillPlace"
	OptionhubService_AddSkill_FullMethodName             = "/OptionhubService/AddSkill"
	OptionhubService_SetSkillById_FullMethodName         = "/OptionhubService/SetSkillById"
	OptionhubService_DeleteSkillById_FullMethodName      = "/OptionhubService/DeleteSkillById"
	OptionhubService_GetCityById_FullMethodName          = "/OptionhubService/GetCityById"
	OptionhubService_GetCityPlace_FullMethodName         = "/OptionhubService/GetCityPlace"
	OptionhubService_AddCity_FullMethodName              = "/OptionhubService/AddCity"
	OptionhubService_SetCityById_FullMethodName          = "/OptionhubService/SetCityById"
	OptionhubService_DeleteCityById_FullMethodName       = "/OptionhubService/DeleteCityById"
)

// OptionhubServiceClient is the client API for OptionhubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptionhubServiceClient interface {
	GetOsById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetAllOs(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddOs(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetOsById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteOsById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
	GetWorkPlaceById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetAllWorkPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddWorkPlace(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetWorkPlaceById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteWorkPlaceById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
	GetStudyPlaceById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetAllStudyPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddStudyPlace(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetStudyPlaceById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteStudyPlaceById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
	GetHobbyById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetHobbyPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddHobby(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetHobbyById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteHobbyById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
	GetSkillById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetSkillPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddSkill(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetSkillById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteSkillById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
	GetCityById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetCityPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddCity(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetCityById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteCityById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
}

type optionhubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionhubServiceClient(cc grpc.ClientConnInterface) OptionhubServiceClient {
	return &optionhubServiceClient{cc}
}

func (c *optionhubServiceClient) GetOsById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetOsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetAllOs(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetAllOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddOs(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetOsById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetOsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteOsById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteOsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetWorkPlaceById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetWorkPlaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetAllWorkPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetAllWorkPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddWorkPlace(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddWorkPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetWorkPlaceById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetWorkPlaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteWorkPlaceById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteWorkPlaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetStudyPlaceById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetStudyPlaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetAllStudyPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetAllStudyPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddStudyPlace(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddStudyPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetStudyPlaceById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetStudyPlaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteStudyPlaceById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteStudyPlaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetHobbyById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetHobbyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetHobbyPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetHobbyPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddHobby(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddHobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetHobbyById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetHobbyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteHobbyById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteHobbyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetSkillById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetSkillById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetSkillPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetSkillPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddSkill(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetSkillById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetSkillById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteSkillById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteSkillById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetCityById(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetCityById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetCityPlace(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetCityPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddCity(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetCityById(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetCityById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteCityById(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteCityById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionhubServiceServer is the server API for OptionhubService service.
// All implementations must embed UnimplementedOptionhubServiceServer
// for forward compatibility.
type OptionhubServiceServer interface {
	GetOsById(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetAllOs(context.Context, *GetAllIn) (*GetAllOut, error)
	AddOs(context.Context, *AddIn) (*AddOut, error)
	SetOsById(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteOsById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	GetWorkPlaceById(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetAllWorkPlace(context.Context, *GetAllIn) (*GetAllOut, error)
	AddWorkPlace(context.Context, *AddIn) (*AddOut, error)
	SetWorkPlaceById(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteWorkPlaceById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	GetStudyPlaceById(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetAllStudyPlace(context.Context, *GetAllIn) (*GetAllOut, error)
	AddStudyPlace(context.Context, *AddIn) (*AddOut, error)
	SetStudyPlaceById(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteStudyPlaceById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	GetHobbyById(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetHobbyPlace(context.Context, *GetAllIn) (*GetAllOut, error)
	AddHobby(context.Context, *AddIn) (*AddOut, error)
	SetHobbyById(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteHobbyById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	GetSkillById(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetSkillPlace(context.Context, *GetAllIn) (*GetAllOut, error)
	AddSkill(context.Context, *AddIn) (*AddOut, error)
	SetSkillById(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteSkillById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	GetCityById(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetCityPlace(context.Context, *GetAllIn) (*GetAllOut, error)
	AddCity(context.Context, *AddIn) (*AddOut, error)
	SetCityById(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteCityById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	mustEmbedUnimplementedOptionhubServiceServer()
}

// UnimplementedOptionhubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOptionhubServiceServer struct{}

func (UnimplementedOptionhubServiceServer) GetOsById(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOsById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetAllOs(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOs not implemented")
}
func (UnimplementedOptionhubServiceServer) AddOs(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOs not implemented")
}
func (UnimplementedOptionhubServiceServer) SetOsById(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOsById not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteOsById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOsById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetWorkPlaceById(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkPlaceById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetAllWorkPlace(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWorkPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) AddWorkPlace(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) SetWorkPlaceById(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkPlaceById not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteWorkPlaceById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkPlaceById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetStudyPlaceById(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyPlaceById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetAllStudyPlace(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudyPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) AddStudyPlace(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudyPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) SetStudyPlaceById(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStudyPlaceById not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteStudyPlaceById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudyPlaceById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetHobbyById(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHobbyById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetHobbyPlace(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHobbyPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) AddHobby(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHobby not implemented")
}
func (UnimplementedOptionhubServiceServer) SetHobbyById(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHobbyById not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteHobbyById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHobbyById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetSkillById(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetSkillPlace(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) AddSkill(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkill not implemented")
}
func (UnimplementedOptionhubServiceServer) SetSkillById(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSkillById not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteSkillById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetCityById(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityById not implemented")
}
func (UnimplementedOptionhubServiceServer) GetCityPlace(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityPlace not implemented")
}
func (UnimplementedOptionhubServiceServer) AddCity(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedOptionhubServiceServer) SetCityById(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCityById not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteCityById(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityById not implemented")
}
func (UnimplementedOptionhubServiceServer) mustEmbedUnimplementedOptionhubServiceServer() {}
func (UnimplementedOptionhubServiceServer) testEmbeddedByValue()                          {}

// UnsafeOptionhubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionhubServiceServer will
// result in compilation errors.
type UnsafeOptionhubServiceServer interface {
	mustEmbedUnimplementedOptionhubServiceServer()
}

func RegisterOptionhubServiceServer(s grpc.ServiceRegistrar, srv OptionhubServiceServer) {
	// If the following call pancis, it indicates UnimplementedOptionhubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OptionhubService_ServiceDesc, srv)
}

func _OptionhubService_GetOsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetOsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetOsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetOsById(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetAllOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetAllOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetAllOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetAllOs(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddOs(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetOsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetOsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetOsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetOsById(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteOsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteOsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteOsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteOsById(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetWorkPlaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetWorkPlaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetWorkPlaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetWorkPlaceById(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetAllWorkPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetAllWorkPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetAllWorkPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetAllWorkPlace(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddWorkPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddWorkPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddWorkPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddWorkPlace(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetWorkPlaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetWorkPlaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetWorkPlaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetWorkPlaceById(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteWorkPlaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteWorkPlaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteWorkPlaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteWorkPlaceById(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetStudyPlaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetStudyPlaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetStudyPlaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetStudyPlaceById(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetAllStudyPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetAllStudyPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetAllStudyPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetAllStudyPlace(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddStudyPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddStudyPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddStudyPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddStudyPlace(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetStudyPlaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetStudyPlaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetStudyPlaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetStudyPlaceById(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteStudyPlaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteStudyPlaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteStudyPlaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteStudyPlaceById(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetHobbyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetHobbyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetHobbyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetHobbyById(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetHobbyPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetHobbyPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetHobbyPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetHobbyPlace(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddHobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddHobby(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetHobbyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetHobbyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetHobbyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetHobbyById(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteHobbyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteHobbyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteHobbyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteHobbyById(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetSkillById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetSkillById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetSkillById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetSkillById(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetSkillPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetSkillPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetSkillPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetSkillPlace(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddSkill(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetSkillById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetSkillById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetSkillById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetSkillById(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteSkillById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteSkillById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteSkillById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteSkillById(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetCityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetCityById(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetCityPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetCityPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetCityPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetCityPlace(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddCity(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetCityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetCityById(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteCityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteCityById(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionhubService_ServiceDesc is the grpc.ServiceDesc for OptionhubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionhubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OptionhubService",
	HandlerType: (*OptionhubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOsById",
			Handler:    _OptionhubService_GetOsById_Handler,
		},
		{
			MethodName: "GetAllOs",
			Handler:    _OptionhubService_GetAllOs_Handler,
		},
		{
			MethodName: "AddOs",
			Handler:    _OptionhubService_AddOs_Handler,
		},
		{
			MethodName: "SetOsById",
			Handler:    _OptionhubService_SetOsById_Handler,
		},
		{
			MethodName: "DeleteOsById",
			Handler:    _OptionhubService_DeleteOsById_Handler,
		},
		{
			MethodName: "GetWorkPlaceById",
			Handler:    _OptionhubService_GetWorkPlaceById_Handler,
		},
		{
			MethodName: "GetAllWorkPlace",
			Handler:    _OptionhubService_GetAllWorkPlace_Handler,
		},
		{
			MethodName: "AddWorkPlace",
			Handler:    _OptionhubService_AddWorkPlace_Handler,
		},
		{
			MethodName: "SetWorkPlaceById",
			Handler:    _OptionhubService_SetWorkPlaceById_Handler,
		},
		{
			MethodName: "DeleteWorkPlaceById",
			Handler:    _OptionhubService_DeleteWorkPlaceById_Handler,
		},
		{
			MethodName: "GetStudyPlaceById",
			Handler:    _OptionhubService_GetStudyPlaceById_Handler,
		},
		{
			MethodName: "GetAllStudyPlace",
			Handler:    _OptionhubService_GetAllStudyPlace_Handler,
		},
		{
			MethodName: "AddStudyPlace",
			Handler:    _OptionhubService_AddStudyPlace_Handler,
		},
		{
			MethodName: "SetStudyPlaceById",
			Handler:    _OptionhubService_SetStudyPlaceById_Handler,
		},
		{
			MethodName: "DeleteStudyPlaceById",
			Handler:    _OptionhubService_DeleteStudyPlaceById_Handler,
		},
		{
			MethodName: "GetHobbyById",
			Handler:    _OptionhubService_GetHobbyById_Handler,
		},
		{
			MethodName: "GetHobbyPlace",
			Handler:    _OptionhubService_GetHobbyPlace_Handler,
		},
		{
			MethodName: "AddHobby",
			Handler:    _OptionhubService_AddHobby_Handler,
		},
		{
			MethodName: "SetHobbyById",
			Handler:    _OptionhubService_SetHobbyById_Handler,
		},
		{
			MethodName: "DeleteHobbyById",
			Handler:    _OptionhubService_DeleteHobbyById_Handler,
		},
		{
			MethodName: "GetSkillById",
			Handler:    _OptionhubService_GetSkillById_Handler,
		},
		{
			MethodName: "GetSkillPlace",
			Handler:    _OptionhubService_GetSkillPlace_Handler,
		},
		{
			MethodName: "AddSkill",
			Handler:    _OptionhubService_AddSkill_Handler,
		},
		{
			MethodName: "SetSkillById",
			Handler:    _OptionhubService_SetSkillById_Handler,
		},
		{
			MethodName: "DeleteSkillById",
			Handler:    _OptionhubService_DeleteSkillById_Handler,
		},
		{
			MethodName: "GetCityById",
			Handler:    _OptionhubService_GetCityById_Handler,
		},
		{
			MethodName: "GetCityPlace",
			Handler:    _OptionhubService_GetCityPlace_Handler,
		},
		{
			MethodName: "AddCity",
			Handler:    _OptionhubService_AddCity_Handler,
		},
		{
			MethodName: "SetCityById",
			Handler:    _OptionhubService_SetCityById_Handler,
		},
		{
			MethodName: "DeleteCityById",
			Handler:    _OptionhubService_DeleteCityById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optionhub_service.proto",
}
